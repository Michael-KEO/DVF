"""
Application Streamlit pour l'analyse comparative des donn√©es DVF (Demandes de Valeurs Fonci√®res)
entre Paris (75) et la Gironde (33).

L'application charge les donn√©es une fois au d√©marrage √† partir de la base de donn√©es
pour les ann√©es de r√©f√©rence (DEFAULT_YEARS) et pour les deux d√©partements cibles.
Les filtres de la barre lat√©rale (ann√©es, types de biens, natures de mutation)
s'appliquent ensuite sur ces donn√©es pr√©-charg√©es pour affiner l'affichage des graphiques et KPIs.

Structure :
- Configuration de la page Streamlit.
- Barre lat√©rale pour les filtres d'affichage.
- Chargement global des donn√©es (mises en cache par Streamlit via data_utils_test).
- Interface utilisateur principale avec plusieurs onglets pour diff√©rentes analyses.
"""
import streamlit as st
import pandas as pd
import plotly.express as px

# Import des fonctions de r√©cup√©ration de donn√©es depuis le module data_utils_test
# Ces fonctions utilisent @st.cache_data pour mettre en cache leurs r√©sultats.
from db.requests import (
    get_kpis_compare, get_top10_communes_prix_m2, get_top_communes_valeur,
    get_prix_m2_par_mois_compare, get_ventes_par_mois_compare,
    get_correlation_surface_prix, get_transactions_par_nature,
    get_evolution_prix_m2, get_prix_m2_par_type_local_compare,
    get_all_distinct_types_locaux, get_all_distinct_natures_mutation,
    DEFAULT_YEARS # Ann√©es de r√©f√©rence pour le chargement initial des donn√©es
)

# --- CONFIGURATION DE LA PAGE STREAMLIT ---
st.set_page_config(
    page_title="Analyse DVF - Paris vs Gironde",
    layout="wide", # Utilise toute la largeur de la page
    initial_sidebar_state="expanded" # Barre lat√©rale ouverte par d√©faut
)

# --- BARRE LAT√âRALE DE FILTRES D'AFFICHAGE ---
# Ces filtres agissent sur les donn√©es d√©j√† charg√©es en m√©moire.
# Ils ne d√©clenchent pas de nouvelles requ√™tes SQL (sauf pour peupler les options des filtres eux-m√™mes).
st.sidebar.title("üñºÔ∏è Filtres d'Affichage")
st.sidebar.markdown("S√©lectionnez les options pour affiner l'affichage des donn√©es.")

# Filtre pour les ann√©es
# Les donn√©es sont initialement charg√©es pour DEFAULT_YEARS.
# Ce filtre permet de choisir quelles de ces ann√©es afficher dans les graphiques.
selected_years_display = st.sidebar.multiselect(
    "Ann√©es √† afficher",
    options=DEFAULT_YEARS,
    default=DEFAULT_YEARS,
    help="Filtre l'affichage des donn√©es d√©j√† charg√©es pour ces ann√©es."
)
if not selected_years_display: # Si aucune ann√©e n'est s√©lectionn√©e, on les affiche toutes par d√©faut
    selected_years_display = DEFAULT_YEARS

# Filtre pour les types de biens
default_types_static = ['Appartement', 'Maison', 'Local industriel. commercial ou assimil√©', 'D√©pendance']
try:
    # Tente de r√©cup√©rer les types de locaux depuis la DB pour les options du filtre
    options_types = get_all_distinct_types_locaux()
    if not options_types: # Si la DB ne retourne rien, utilise la liste statique
        options_types = default_types_static
except Exception: # En cas d'erreur de connexion DB ou autre
    options_types = default_types_static
selected_types_display = st.sidebar.multiselect(
    "Types de biens √† afficher",
    options=options_types,
    default=options_types, # Par d√©faut, tous les types disponibles sont s√©lectionn√©s
    help="Filtre l'affichage pour ces types de biens."
)
if not selected_types_display: # Si aucun type n'est s√©lectionn√©
    selected_types_display = options_types

# Filtre pour les natures de mutation
default_natures_static = ['Vente', 'Vente en l\'√©tat futur d\'ach√®vement', 'Adjudication']
try:
    # Tente de r√©cup√©rer les natures de mutation depuis la DB
    options_natures = get_all_distinct_natures_mutation()
    if not options_natures: # Si la DB ne retourne rien, utilise la liste statique
        options_natures = default_natures_static
except Exception: # En cas d'erreur
    options_natures = default_natures_static
selected_natures_display = st.sidebar.multiselect(
    "Natures de mutation √† afficher",
    options=options_natures,
    default=options_natures, # Par d√©faut, toutes les natures disponibles sont s√©lectionn√©es
    help="Filtre l'affichage pour ces natures de mutation."
)
if not selected_natures_display: # Si aucune nature n'est s√©lectionn√©e
    selected_natures_display = options_natures

# --- CHARGEMENT GLOBAL DES DONN√âES (MISES EN CACHE) ---
# Ces fonctions sont appel√©es une fois (par session utilisateur, ou jusqu'√† expiration du cache TTL).
# Elles r√©cup√®rent les donn√©es pour les DEFAULT_YEARS et pour les d√©partements 75 et 33.
# Les filtres de la sidebar seront appliqu√©s sur ces DataFrames en m√©moire.
st.info(f"Chargement des donn√©es de r√©f√©rence pour les ann√©es: {', '.join(map(str, DEFAULT_YEARS))}...")

df_kpis_full = get_kpis_compare()
df_top10_full = get_top10_communes_prix_m2()
df_top_valeur_full = get_top_communes_valeur()
df_prix_mois_full = get_prix_m2_par_mois_compare()
df_ventes_mois_full = get_ventes_par_mois_compare()
df_correlation_full = get_correlation_surface_prix()
df_transactions_full = get_transactions_par_nature()
df_evolution_prix_full = get_evolution_prix_m2() # Note: c'est un alias de get_prix_m2_par_mois_compare
df_typologie_full = get_prix_m2_par_type_local_compare()

st.success("Donn√©es de r√©f√©rence charg√©es.")

# --- APPLICATION PRINCIPALE ---
st.title("üè¢ Analyse DVF - Comparaison Paris (75) vs Gironde (33)")
st.markdown(f"### Donn√©es de ventes immobili√®res (Affichage filtr√© pour : {', '.join(map(str, selected_years_display))})")

# D√©finition des onglets de l'application
tab_kpis, tab_communes, tab_evolutions, tab_types_biens, tab_autres = st.tabs([
    "üìä Indicateurs Cl√©s", "üèòÔ∏è Analyse par Commune", "üìà √âvolutions Temporelles",
    "üè† Analyse par Type de Bien", "üîç Autres Analyses"
])

# --- ONGLET 1: Indicateurs Cl√©s (KPIs) ---
with tab_kpis:
    st.header("Indicateurs Cl√©s de Performance (KPIs)")
    st.caption(
        f"Ces KPIs sont calcul√©s sur les donn√©es des ann√©es de r√©f√©rence : {', '.join(map(str, DEFAULT_YEARS))}. "
        "Ils ne sont pas affect√©s par les filtres d'ann√©es de la barre lat√©rale (qui ne servent qu'√† filtrer l'affichage des graphiques d'√©volution)."
    )
    kpis_data = df_kpis_full # Utilise les donn√©es KPI pr√©-charg√©es et non filtr√©es par la sidebar

    if kpis_data: # V√©rifie si des donn√©es KPI ont √©t√© retourn√©es
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üèôÔ∏è Paris (75)")
            # Extraction des KPIs pour Paris
            metrics_paris = {k: v for k, v in kpis_data.items() if '_75' in k and pd.notnull(v)}
            col_a, col_b, col_c, col_d = st.columns(4) # Colonnes pour l'affichage des m√©triques
            with col_a: st.metric("Nombre de ventes", f"{metrics_paris.get('Nombre_ventes_75', 0):,}")
            with col_b:
                full_value = f"{metrics_paris.get('Valeur_fonciere_totale_75', 0):,.0f} ‚Ç¨"
                st.markdown(f"""
                    <div title="{full_value}">
                        <b>Valeur fonci√®re totale</b><br/>
                        {full_value}
                    </div>
                """, unsafe_allow_html=True)

            with col_c:
                full_price = f"{metrics_paris.get('Prix_m2_moyen_75', 0):,.0f} ‚Ç¨/m¬≤"
                st.markdown(f"""
                    <div title="{full_price}">
                        <b>Prix moyen au m¬≤</b><br/>
                        {full_price}
                    </div>
                """, unsafe_allow_html=True)
            with col_d: st.metric("Surface moyenne", f"{metrics_paris.get('Surface_moyenne_75', 0):.1f} m¬≤")

        with col2:
            st.subheader("üåÜ Gironde (33)")
            # Extraction des KPIs pour la Gironde
            metrics_gironde = {k: v for k, v in kpis_data.items() if '_33' in k and pd.notnull(v)}
            col_a, col_b, col_c, col_d = st.columns(4)
            with col_a: st.metric("Nombre de ventes", f"{metrics_gironde.get('Nombre_ventes_33', 0):,}")
            with col_b:
                full_value = f"{metrics_gironde.get('Valeur_fonciere_totale_33', 0):,.0f} ‚Ç¨"
                st.markdown(f"""
                    <div title="{full_value}">
                        <b>Valeur fonci√®re totale</b><br/>
                        {full_value}
                    </div>
                """, unsafe_allow_html=True)
            with col_c:
                full_price = f"{metrics_gironde.get('Prix_m2_moyen_33', 0):,.0f} ‚Ç¨/m¬≤"
                st.markdown(f"""
                    <div title="{full_price}">
                        <b>Prix moyen au m¬≤</b><br/>
                        {full_price}
                    </div>
                """, unsafe_allow_html=True)
            with col_d: st.metric("Surface moyenne", f"{metrics_gironde.get('Surface_moyenne_33', 0):.1f} m¬≤")
    else:
        st.warning("Donn√©es KPIs non disponibles. V√©rifiez la connexion √† la base de donn√©es ou les requ√™tes.")
    st.markdown("---")

# --- ONGLET 2: Analyse par Commune ---
with tab_communes:
    st.header("Analyse D√©taill√©e par Commune")

    st.subheader("Top 10 communes par prix moyen au m¬≤ (Appartements & Maisons)")
    st.caption(f"Le Top 10 est calcul√© sur les ann√©es de r√©f√©rence {DEFAULT_YEARS} pour les Appartements et Maisons. "
               "Les filtres de la barre lat√©rale (types de biens) s'appliquent sur ce Top 10 pour l'affichage.")

    df_top10_display = df_top10_full.copy() # Copie pour ne pas modifier le DataFrame global
    if 'Type_local' in df_top10_display.columns:
        # Filtre l'affichage du Top 10 bas√© sur les types de locaux s√©lectionn√©s dans la sidebar
        df_top10_display = df_top10_display[df_top10_display['Type_local'].isin(selected_types_display)]
    # Note: Le filtrage par 'selected_years_display' ici ne changerait pas le "Top 10" lui-m√™me,
    # car il est calcul√© sur DEFAULT_YEARS. Pour un "Top 10 des ann√©es X", la fonction SQL devrait √™tre param√©tr√©e.

    if not df_top10_display.empty:
        types_dans_top10 = df_top10_display['Type_local'].unique()
        couleurs_map = {'Appartement': 'Blues', 'Maison': 'Reds'} # Palette de couleurs par type

        for type_bien_iter in types_dans_top10:
            # On se concentre sur Appartements et Maisons pour ce graphique sp√©cifique
            if type_bien_iter not in ['Appartement', 'Maison']:
                continue

            df_type_specifique = df_top10_display[df_top10_display['Type_local'] == type_bien_iter]
            if df_type_specifique.empty:
                continue

            st.markdown(f"#### {type_bien_iter}s")
            col1_comm, col2_comm = st.columns(2)
            for dep_name, col_target, suffix_dep in [("Paris", col1_comm, "Paris"), ("Gironde", col2_comm, "Gironde")]:
                df_dep = df_type_specifique[df_type_specifique['Departement'] == dep_name].sort_values(
                    'Prix_m2_moyen', ascending=False
                )
                with col_target:
                    st.write(f"##### {dep_name} ({'75' if dep_name == 'Paris' else '33'}) - {type_bien_iter}s")
                    if not df_dep.empty:
                        fig = px.bar(df_dep, x='Nom_commune', y='Prix_m2_moyen', color='Prix_m2_moyen',
                                     color_continuous_scale=couleurs_map.get(type_bien_iter, 'Viridis'),
                                     title=f"Top communes - {type_bien_iter}s ({suffix_dep})",
                                     text='Prix_m2_moyen',
                                     labels={'Nom_commune': 'Commune', 'Prix_m2_moyen': 'Prix moyen au m¬≤ (‚Ç¨)'})
                        fig.update_traces(texttemplate='%{text:,.0f} ‚Ç¨/m¬≤', textposition='outside')
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.info(f"Aucune donn√©e Top 10 pour les {type_bien_iter.lower()}s √† {dep_name} avec les filtres d'affichage actuels.")
    else:
        st.warning("Aucune donn√©e Top 10 communes (prix/m¬≤) √† afficher avec les filtres actuels.")
    st.markdown("---")

    st.subheader("Top 5 communes par valeur fonci√®re totale")
    st.caption(f"Le Top 5 est calcul√© sur les ann√©es de r√©f√©rence: {', '.join(map(str, DEFAULT_YEARS))}. "
               "Non affect√© par les filtres de la barre lat√©rale.")
    if not df_top_valeur_full.empty:
        col1, col2 = st.columns(2)
        for dep_name, col_target, suffix, couleur in [("Paris", col1, "Paris (75)", "Blues"),
                                                      ("Gironde", col2, "Gironde (33)", "Reds")]:
            df_dep = df_top_valeur_full[df_top_valeur_full['Departement'] == dep_name]
            with col_target:
                st.write(f"##### {suffix}")
                if not df_dep.empty:
                    fig = px.bar(df_dep, x='Nom_commune', y='Valeur_fonciere_totale',
                                 title=f"Top 5 Valeur Fonci√®re ({suffix})",
                                 text=df_dep['Valeur_fonciere_totale'].apply(lambda x: f"{x:,.0f} ‚Ç¨"),
                                 color='Valeur_fonciere_totale',
                                 color_continuous_scale=couleur,
                                 labels={'Nom_commune': 'Commune', 'Valeur_fonciere_totale': 'Valeur fonci√®re totale (‚Ç¨)'})
                    fig.update_traces(textposition='outside')
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info(f"Aucune donn√©e Top 5 Valeur Fonci√®re pour {suffix} (probablement aucune vente enregistr√©e).")
    else:
        st.warning("Donn√©es Top 5 communes (valeur fonci√®re) non disponibles.")
    st.markdown("---")

# --- ONGLET 3: √âvolutions Temporelles ---
with tab_evolutions:
    st.header("√âvolutions Temporelles du March√© Immobilier")

    st.subheader("√âvolution du prix au m¬≤ par mois (Appartements & Maisons)")
    st.caption(f"Affichage pour les ann√©es s√©lectionn√©es: {', '.join(map(str, selected_years_display))}. "
               "Donn√©es de base calcul√©es pour Appartements et Maisons sur les ann√©es de r√©f√©rence.")

    df_prix_mois_display = df_prix_mois_full.copy()
    if 'Annee' in df_prix_mois_display.columns:
        # Filtre l'affichage bas√© sur les ann√©es s√©lectionn√©es dans la sidebar
        df_prix_mois_display = df_prix_mois_display[df_prix_mois_display['Annee'].isin(selected_years_display)]

    if not df_prix_mois_display.empty:
        fig = px.line(df_prix_mois_display, x='Mois', y='Prix_m2_moyen', color='Departement', facet_col='Annee',
                      markers=True,
                      title="√âvolution du prix moyen au m¬≤ par mois (Appartements & Maisons)",
                      labels={"Prix_m2_moyen": "Prix moyen (‚Ç¨/m¬≤)", "Mois": "Mois", "Annee": "Ann√©e"},
                      color_discrete_map={"Paris": "#1E88E5", "Gironde": "#D81B60"})
        fig.update_xaxes(tickvals=list(range(1, 13)),
                         ticktext=['Jan', 'F√©v', 'Mar', 'Avr', 'Mai', 'Juin', 'Juil', 'Ao√ªt', 'Sep', 'Oct', 'Nov', 'D√©c'])
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("Aucune donn√©e d'√©volution des prix/m¬≤ par mois √† afficher avec les filtres actuels.")
    st.markdown("---")

    st.subheader("√âvolution du nombre de ventes par mois")
    st.caption(f"Affichage pour les ann√©es s√©lectionn√©es: {', '.join(map(str, selected_years_display))}. "
               "Comprend tous types de biens et toutes natures de mutation des ann√©es de r√©f√©rence.")

    df_ventes_mois_display = df_ventes_mois_full.copy()
    if 'Annee' in df_ventes_mois_display.columns:
        # Filtre l'affichage bas√© sur les ann√©es s√©lectionn√©es
        df_ventes_mois_display = df_ventes_mois_display[df_ventes_mois_display['Annee'].isin(selected_years_display)]
    # Note: La fonction get_ventes_par_mois_compare charge tous types/natures.
    # Pour appliquer les filtres selected_types_display et selected_natures_display ici,
    # il faudrait que la fonction SQL retourne ces colonnes et qu'elles soient pr√©sentes dans df_ventes_mois_full.

    if not df_ventes_mois_display.empty:
        fig = px.line(df_ventes_mois_display, x='Mois', y='Nombre_ventes', color='Departement', facet_col='Annee',
                      markers=True,
                      title="√âvolution du nombre de ventes par mois",
                      labels={"Nombre_ventes": "Nombre de ventes", "Mois": "Mois", "Annee": "Ann√©e"},
                      color_discrete_map={"Paris": "#1E88E5", "Gironde": "#D81B60"})
        fig.update_xaxes(tickvals=list(range(1, 13)),
                         ticktext=['Jan', 'F√©v', 'Mar', 'Avr', 'Mai', 'Juin', 'Juil', 'Ao√ªt', 'Sep', 'Oct', 'Nov', 'D√©c'])
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("Aucune donn√©e d'√©volution du nombre de ventes par mois √† afficher avec les filtres actuels.")
    st.markdown("---")

    st.subheader("√âvolution des prix au m¬≤ (Moyenne Annuelle - Appartements & Maisons)")
    st.caption(f"Affichage pour les ann√©es s√©lectionn√©es: {', '.join(map(str, selected_years_display))}.")
    df_evol_prix_display = df_evolution_prix_full.copy() # df_evolution_prix_full est un alias de df_prix_mois_full
    if 'Annee' in df_evol_prix_display.columns:
        df_evol_prix_display = df_evol_prix_display[df_evol_prix_display['Annee'].isin(selected_years_display)]

    if not df_evol_prix_display.empty:
        # Calcul de la moyenne annuelle √† partir des donn√©es mensuelles filtr√©es
        df_evol_annuelle = df_evol_prix_display.groupby(['Annee', 'Departement'])['Prix_m2_moyen'].mean().reset_index()
        if not df_evol_annuelle.empty:
            fig = px.line(df_evol_annuelle, x="Annee", y="Prix_m2_moyen", color="Departement", markers=True,
                          title="√âvolution des prix au m¬≤ (Moyenne Annuelle - Appartements & Maisons)",
                          labels={"Annee": "Ann√©e", "Prix_m2_moyen": "Prix moyen (‚Ç¨/m¬≤)"},
                          color_discrete_map={"Paris": "#1E88E5", "Gironde": "#D81B60"})
            fig.update_xaxes(type='category') # Assure que toutes les ann√©es sont affich√©es comme des cat√©gories distinctes
            fig.update_layout(height=500)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("Donn√©es agr√©g√©es vides pour l'√©volution annuelle des prix avec les filtres actuels.")
    else:
        st.warning("Aucune donn√©e d'√©volution des prix/m¬≤ (annuelle) √† afficher avec les filtres actuels.")
    st.markdown("---")

# --- ONGLET 4: Analyse par Type de Bien ---
with tab_types_biens:
    st.header("Analyse par Type de Bien Immobilier")
    st.caption(f"Les donn√©es sont calcul√©es sur les ann√©es de r√©f√©rence {DEFAULT_YEARS}. "
               "Le filtre 'Types de biens' de la barre lat√©rale s'applique √† l'affichage.")

    st.subheader("Typologie des biens vendus par d√©partement")
    df_typologie_display = df_typologie_full.copy()
    if 'Type_local' in df_typologie_display.columns:
        # Filtre l'affichage bas√© sur les types de locaux s√©lectionn√©s
        df_typologie_display = df_typologie_display[df_typologie_display['Type_local'].isin(selected_types_display)]
    # Le filtre selected_years_display n'est pas appliqu√© ici car la fonction SQL agr√®ge d√©j√† sur les DEFAULT_YEARS.

    if not df_typologie_display.empty:
        col1, col2 = st.columns(2)
        for dep_name, col_target, suffix in [("Paris", col1, "Paris (75)"), ("Gironde", col2, "Gironde (33)")]:
            df_dep = df_typologie_display[df_typologie_display['Departement'] == dep_name]
            with col_target:
                st.write(f"#### {suffix}")
                if not df_dep.empty:
                    # Diagramme en barres: Prix moyen au m¬≤ par type
                    fig_bar = px.bar(df_dep, x="Type_local", y="Prix_m2_moyen", color="Type_local",
                                     title=f"{suffix} - Prix moyen au m¬≤ par type",
                                     text=df_dep['Prix_m2_moyen'].apply(
                                         lambda x: f"{x:,.0f} ‚Ç¨/m¬≤" if pd.notnull(x) else "N/A"),
                                     labels={"Type_local": "Type de bien", "Prix_m2_moyen": "Prix moyen (‚Ç¨/m¬≤)"},
                                     category_orders={"Type_local": sorted(df_dep['Type_local'].unique())})
                    st.plotly_chart(fig_bar, use_container_width=True)

                    # Diagramme circulaire: R√©partition des ventes par type
                    fig_pie = px.pie(df_dep, values="Nombre_ventes", names="Type_local",
                                     title=f"{suffix} - R√©partition des ventes par type")
                    st.plotly_chart(fig_pie, use_container_width=True)
                else:
                    st.info(f"Aucune donn√©e de typologie pour {suffix} avec les filtres d'affichage actuels.")
    else:
        st.warning("Aucune donn√©e de typologie de biens √† afficher avec les filtres actuels.")
    st.markdown("---")

    st.subheader("Corr√©lation entre surface et prix par type de local")
    st.caption(f"Les donn√©es sont calcul√©es sur les ann√©es de r√©f√©rence {DEFAULT_YEARS}. "
               "Le filtre 'Types de biens' de la barre lat√©rale s'applique √† l'affichage.")
    df_correlation_display = df_correlation_full.copy()
    if 'Type_local' in df_correlation_display.columns:
        # Filtre l'affichage bas√© sur les types de locaux s√©lectionn√©s
        df_correlation_display = df_correlation_display[
            df_correlation_display['Type_local'].isin(selected_types_display)]
    # Le filtre selected_years_display n'est pas appliqu√© ici (agr√©gation sur DEFAULT_YEARS dans la fonction SQL).

    if not df_correlation_display.empty:
        col1, col2 = st.columns(2)
        for dep_code, col_target, suffix in [('75', col1, "Paris (75)"), ('33', col2, "Gironde (33)")]:
            df_dep = df_correlation_display[df_correlation_display['Code_departement'] == dep_code]
            with col_target:
                st.write(f"#### {suffix}")
                if not df_dep.empty:
                    # Nettoyage des donn√©es pour le graphique de corr√©lation (suppression des NaN)
                    df_dep_clean = df_dep.dropna(subset=['Prix_moyen_m2', 'Surface_moyenne', 'Prix_moyen'])
                    if not df_dep_clean.empty:
                        fig_corr = px.scatter(df_dep_clean, x="Surface_moyenne", y="Prix_moyen", color="Type_local",
                                              # La taille des points peut repr√©senter le prix au m¬≤
                                              size=[float(x) if pd.notnull(x) else 1 for x in df_dep_clean["Prix_moyen_m2"]],
                                              hover_data=["Type_local", "Surface_moyenne", "Prix_moyen", "Prix_moyen_m2"],
                                              title=f"{suffix} - Corr√©lation surface/prix",
                                              labels={"Surface_moyenne": "Surface moyenne (m¬≤)",
                                                      "Prix_moyen": "Prix moyen (‚Ç¨)",
                                                      "Prix_moyen_m2": "Prix au m¬≤ (‚Ç¨/m¬≤)"})
                        st.plotly_chart(fig_corr, use_container_width=True)
                    else:
                        st.info(f"Donn√©es insuffisantes pour le graphique de corr√©lation ({suffix}) apr√®s nettoyage des valeurs manquantes.")
                else:
                    st.info(f"Aucune donn√©e de corr√©lation pour {suffix} avec les filtres d'affichage actuels.")
    else:
        st.warning("Aucune donn√©e de corr√©lation surface/prix √† afficher avec les filtres actuels.")
    st.markdown("---")

# --- ONGLET 5: Autres Analyses ---
with tab_autres:
    st.header("Analyses Diverses")
    st.subheader("Nombre de transactions par nature de mutation")
    st.caption(f"Les donn√©es sont calcul√©es sur les ann√©es de r√©f√©rence {DEFAULT_YEARS}. "
               "Le filtre 'Natures de mutation' de la barre lat√©rale s'applique √† l'affichage.")

    df_transactions_display = df_transactions_full.copy()
    if 'Nature_mutation' in df_transactions_display.columns:
        # Filtre l'affichage bas√© sur les natures de mutation s√©lectionn√©es
        df_transactions_display = df_transactions_display[
            df_transactions_display['Nature_mutation'].isin(selected_natures_display)]
    # Le filtre selected_years_display n'est pas appliqu√© ici.
    # On pourrait aussi filtrer par selected_types_display si la fonction SQL ramenait Type_local.

    if not df_transactions_display.empty:
        col1, col2 = st.columns(2)
        for dep_code, col_target, suffix in [('75', col1, "Paris (75)"), ('33', col2, "Gironde (33)")]:
            df_dep = df_transactions_display[df_transactions_display['Code_departement'] == dep_code].sort_values(
                'Nombre_transactions', ascending=False)
            with col_target:
                st.write(f"#### {suffix}")
                if not df_dep.empty:
                    fig_trans = px.bar(df_dep, x="Nature_mutation", y="Nombre_transactions", color="Nature_mutation",
                                       text='Nombre_transactions', title=f"{suffix} - Transactions par nature",
                                       labels={"Nature_mutation": "Nature de mutation",
                                               "Nombre_transactions": "Nombre de transactions"},
                                       category_orders={"Nature_mutation": sorted(df_dep['Nature_mutation'].unique())})
                    st.plotly_chart(fig_trans, use_container_width=True)
                else:
                    st.info(f"Aucune transaction par nature pour {suffix} avec les filtres d'affichage actuels.")
    else:
        st.warning("Aucune donn√©e de transactions par nature √† afficher avec les filtres actuels.")
    st.markdown("---")

# --- PIED DE PAGE ET INFORMATIONS DANS LA SIDEBAR ---
st.sidebar.markdown("---")
st.sidebar.caption("Source: Donn√©es DVF (Demandes de Valeurs Fonci√®res)")
st.sidebar.caption(f"Donn√©es de base charg√©es pour les ann√©es: {', '.join(map(str, DEFAULT_YEARS))}")

st.markdown("---")
# Affiche le statut de la connexion √† la base de donn√©es ou les messages d'erreur
db_status_message = st.session_state.get('db_status', 'Statut DB non v√©rifi√©')
if 'db_error_message' in st.session_state and st.session_state.db_error_message:
    st.error(f"Derni√®re erreur base de donn√©es: {st.session_state.db_error_message}")
    db_status_message = f"Erreur DB: {st.session_state.db_error_message}"
st.caption(f"Application d'analyse des donn√©es DVF - {db_status_message}")